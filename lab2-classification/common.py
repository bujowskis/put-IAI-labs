def getEuclideanDistance(A, B):
    S = sum([(a-b)**2 for a, b in zip (A, B)])
    return S**0.5
   
   
def displayDataSet(plt, data, classified, not_classified = [], scale = 1):
    fig = plt.figure(figsize=(5 * scale, 5 * scale), dpi=100)
    ax0 = plt.subplot(1,1,1)
    ax0.set_xlim([0.0, 1.0])
    ax0.set_ylim([0.0, 1.0])
    ax0.set_xlabel("x", fontsize=14)
    ax0.set_ylabel("y", fontsize=14)
    ax0.set_xticks([0.0, 0.25, 0.5, 0.75, 1.0])
    ax0.set_yticks([0.0, 0.25, 0.5, 0.75, 1.0])
    
    COLORS = ["b", "g", "r", "c", "m", "y", "gold", "slateblue", "deeppink", "grey"]
    
    objects = sum([len(a) for a in data])
    
    for cnt, a in enumerate(classified):
        X = [data[i][0] for i in a]
        Y = [data[i][1] for i in a]
        ax0.plot(X, Y, marker="o", ls="", ms=5, mfc = COLORS[cnt], mec="black")
        
    if len(not_classified) > 0:
        X = [data[i][0] for i in not_classified]
        Y = [data[i][1] for i in not_classified]
        ax0.plot(X, Y, marker="s", ls="", ms=6, mfc = "black", mec="black")
    
    plt.tight_layout()
    plt.draw()
    plt.show()

def displayCompareDataSet(plt, data, reference_classified, knn_classified, scale = 1):
    fig = plt.figure(figsize=(5 * scale, 5 * scale), dpi=100)
    ax0 = plt.subplot(1,1,1)
    ax0.set_xlim([0.0, 1.0])
    ax0.set_ylim([0.0, 1.0])
    ax0.set_xlabel("x", fontsize=14)
    ax0.set_ylabel("y", fontsize=14)
    ax0.set_xticks([0.0, 0.25, 0.5, 0.75, 1.0])
    ax0.set_yticks([0.0, 0.25, 0.5, 0.75, 1.0])
    
    COLORS = ["b", "g", "r", "c", "m", "y", "gold", "slateblue", "deeppink", "grey"]
    
    objects = sum([len(a) for a in data])

    INCORRECTLY = []
    COLOR = []

    for i in range(len(knn_classified)):
        for j in range(len(knn_classified[i])):
            if knn_classified[i][j] not in reference_classified[i]:
                INCORRECTLY.append(knn_classified[i][j])
                for k in range(len(reference_classified)):
                    if knn_classified[i][j] in reference_classified[k]:
                        COLOR.append(COLORS[k])
                        break
                        
    for c in range(len(reference_classified)):
        X = [data[INCORRECTLY[i]][0] for i in range(len(INCORRECTLY)) if COLOR[i] == COLORS[c]]
        Y = [data[INCORRECTLY[i]][1] for i in range(len(INCORRECTLY)) if COLOR[i] == COLORS[c]]
        ax0.plot(X, Y, marker="s", ls="", ms=9, mfc = COLORS[c], mec="black")    
    
    for cnt, a in enumerate(knn_classified):
        X = [data[i][0] for i in a]
        Y = [data[i][1] for i in a]
        ax0.plot(X, Y, marker="o", ls="", ms=5, mfc = COLORS[cnt], mec="black")

	
    
    plt.tight_layout()
    plt.draw()
    plt.show()
    
def getTestDataSet():
    return [[0.25980258928914035, 0.7655116779002312], [0.18693830608897657, 0.7834271584229567], [0.2323892511073395, 0.8060266414635234], [0.18245127527368585, 0.7431398467959367], [0.2098729415587089, 0.7344682346313631], [0.18853229067689722, 0.7842951000809403], [0.26912569720966584, 0.7957361528430443], [0.19020098972108546, 0.7975175323493953], [0.25085655998780676, 0.7246018248223394], [0.23532339919378903, 0.871543741261008], [0.12962857187109472, 0.873595307576713], [0.16401114075234427, 0.7755297044641337], [0.16308955536890288, 0.8316926011744782], [0.18106441442797522, 0.9119848308841574], [0.165411426713162, 0.7653802653838561], [0.23742600682065826, 0.8080106874749717], [0.15264496361992702, 0.8414462176171933], [0.23463371747059406, 0.8019563670471643], [0.16481091484141902, 0.7577539191560507], [0.15633882350658837, 0.8655833090434761], [0.2837812257433207, 0.8077914273778376], [0.2581598534580727, 0.8188071959347848], [0.14944464908218136, 0.8197394818883317], [0.21438288939667605, 0.7994737712975449], [0.20882671127640645, 0.8673324901245407], [0.12894534645708894, 0.7286895277515959], [0.25663218548791694, 0.7845199245665047], [0.22775549115515276, 0.8675038948853137], [0.16778651055856791, 0.8710371847354161], [0.28014635722943865, 0.765909060573891], [0.19172412491037502, 0.7978150101452778], [0.18909582786458976, 0.7866760284880222], [0.14145521538764744, 0.8321079148767867], [0.11982502284207303, 0.799758060864879], [0.2746778641380437, 0.8285799813183714], [0.17763913219574062, 0.6697887953827508], [0.25737240506735015, 0.7893145841330457], [0.1258723758824749, 0.81424096244157], [0.2403509510544619, 0.8548333562171884], [0.23595427428356205, 0.7947133668210868], [0.17070549316605188, 0.7306249847123912], [0.21134289108522228, 0.7483281102873013], [0.1569370260271722, 0.8669411426607528], [0.17195540544362015, 0.7195346185778018], [0.26277518690638896, 0.8647617443626592], [0.14672983047576582, 0.773075646400556], [0.1483242952596357, 0.8679049277412393], [0.08379878987477336, 0.834657653560581], [0.1973195595388869, 0.7016339074539512], [0.1875725343387556, 0.8131716666706553], [0.49068787921818896, 0.3482293128806996], [0.4794627368127827, 0.6162520879065718], [0.7248412043261755, 0.3733980476431683], [0.9327231019816931, 0.40540682010707624], [0.4364182485989701, 0.5372532159239836], [0.55100346355375, 0.6433139700151832], [0.5782690019219253, 0.42743409770798974], [0.43321080211688034, 0.6837148822835022], [0.5313234972426957, 0.5088393008296579], [0.6576530726994186, 0.5968065101776029], [0.5711093739818758, 0.5734756456171498], [0.5964107710116944, 0.5471931606257586], [0.7246601128572128, 0.8149854071561565], [0.6369972649206959, 0.6165338631915084], [0.5296699809295239, 0.6134110220361638], [0.6434465210933824, 0.6917117329111853], [0.48018600567055686, 0.608094219073704], [0.5120539690660804, 0.5554585176669603], [0.6460908331623262, 0.6249046910949634], [0.5017408517496932, 0.6322238241114909], [0.4521359870370856, 0.6487359522958812], [0.4734354084375231, 0.46572395261319194], [0.6475787024794202, 0.7888358416496555], [0.3768632259948076, 0.5094065999092534], [0.47987683011167814, 0.5481619391878396], [0.5475175368562383, 0.4580981634103799], [0.6225509481926823, 0.5938439619425823], [0.5032357222766346, 0.5614233746248798], [0.6359324833542133, 0.6036736884666684], [0.4165651998898791, 0.6809616168091881], [0.6613772482464841, 0.6393002827625115], [0.4934719724219756, 0.6002695024402988], [0.5205478886713293, 0.6220568812191317], [0.5684935207484139, 0.6545491034994904], [0.6905213799828775, 0.667056381615316], [0.26777095784741883, 0.4819468120316279], [0.6279150879149645, 0.6299944027118431], [0.2707146473674114, 0.6321709095730011], [0.6842450710367799, 0.7629353970272635], [0.5523976413824793, 0.6943662265495383], [0.6301003278824204, 0.488866358890346], [0.6025280433681083, 0.7417023868761018], [0.5144040359334877, 0.5801935508523259], [0.5643215674618207, 0.7189943992929717], [0.6573065118784343, 0.6200727339983326], [0.466846362450708, 0.5638215607535351], [0.6809367746166548, 0.8276228314609658], [0.5445812260303017, 0.5776656471092005], [0.727550849268714, 0.6866504815358548], [0.49983166342986196, 0.6086937850512023], [0.763595883025503, 0.21873181831030705], [0.8438873131306718, 0.21370925096392296], [0.7692025122528546, 0.21962790821984574], [0.8142947538532289, 0.23904702852409046], [0.7901617400430961, 0.2600287317924511], [0.7161188591499101, 0.19751233450395803], [0.7800183866999963, 0.28674105601167166], [0.7360496514756905, 0.15470889130567192], [0.8061183945738369, 0.21824090370169721], [0.7407633677745482, 0.21412084414970803], [0.7740105645125237, 0.1700414970905622], [0.7366495376648851, 0.23740358150167745], [0.7641165097747938, 0.19467271082770582], [0.7572529236648459, 0.15996834928586628], [0.7635281904387123, 0.21563373212086717], [0.7171247410775117, 0.2032321385059441], [0.7427812620906769, 0.2081234982032099], [0.7125833705189477, 0.2514962962993874], [0.8169069273298982, 0.18719842512248033], [0.752291941171763, 0.1792938698633045], [0.7756139493585137, 0.19780832603936202], [0.7637753476766609, 0.18423436490564488], [0.7454896351059094, 0.17525988403680184], [0.7096460638222494, 0.2812204077851721], [0.8111267039967297, 0.22513954935739264], [0.7502627516412388, 0.15758632117229662], [0.7603337267478987, 0.233850645012879], [0.7399561013335461, 0.190757136698997], [0.7046439026902264, 0.19089309962688827], [0.7704272542365859, 0.17833056586384655], [0.7177601024475891, 0.20972266874083634], [0.7354916806376537, 0.1685151229557355], [0.8071220515341826, 0.15248756865160162], [0.7773632897848626, 0.19388273164026645], [0.8126443421374628, 0.24953728123768817], [0.7915824963626531, 0.1685113727552806], [0.7264270131177496, 0.21146676421838909], [0.7375155265059037, 0.21851584412352354], [0.7896423795078987, 0.19520122836146908], [0.7396716895253048, 0.1863917936832151], [0.7667451749699322, 0.18954452087105222], [0.7253925643577133, 0.17186891671149737], [0.777422292337635, 0.2132181979256972], [0.7370262882652369, 0.18089393591910755], [0.7162108691535054, 0.21177072434317612], [0.7393873959744715, 0.2062939363227969], [0.7284048257328658, 0.2511976107935823], [0.7793079651848375, 0.13897251772000985], [0.82178034458249, 0.15061057027263663], [0.758364910839459, 0.2173608631410356], [0.24140459856555463, 0.2868782404421361], [0.2194647059389752, 0.25498108946833176], [0.2284613417122905, 0.31249279857763523], [0.1551844249562901, 0.2038002388053073], [0.2502445399712676, 0.30036832307173134], [0.23047708643613726, 0.2953569735311845], [0.1292416844460486, 0.18099875600387896], [0.2771797098499762, 0.24179998035090078], [0.2238921418172741, 0.2858747284134067], [0.32799188733750834, 0.264738848902937], [0.24748833487940902, 0.36127182645975525], [0.310710653243451, 0.4809968139047759], [0.24770367064368162, 0.2665299058548768], [0.13663424385301984, 0.22223894257714832], [0.2981410637763645, 0.4850745524227462], [0.28164717273553824, 0.40192312562996413], [0.21240602808176415, 0.3865063491054737], [0.15713634304379007, 0.29002122903090705], [0.22556146151260886, 0.30944690593994406], [0.31477455520420783, 0.40796325392942284], [0.17573311426478827, 0.32792236516590445], [0.24169932968804955, 0.2925707474727543], [0.19682161835845502, 0.35444427135778767], [0.18168165403967676, 0.2932363974148367], [0.22938508210179925, 0.4685136782483831], [0.20332977767271956, 0.26585364705715425], [0.25351998258629593, 0.2548554786573292], [0.17880843774074887, 0.3175686188856597], [0.2676085739337526, 0.3199831245661197], [0.3001804376243233, 0.2287189714820349], [0.14680391456801847, 0.1351603027942524], [0.14269305855210906, 0.30119250329326114], [0.14467436869642947, 0.34223658577882937], [0.2473106490374033, 0.28658827727460806], [0.27564659537288844, 0.36117093114189025], [0.09089254660924162, 0.3471499383765774], [0.17018281729578483, 0.32532332894872595], [0.14778419164831744, 0.32198639430571147], [0.2740585187586583, 0.15396870998790993], [0.1549688706045129, 0.35922136949233685], [0.13717390160755605, 0.3995031506312071], [0.24801728354365055, 0.2614037325382841], [0.2815635920649294, 0.34353059497817645], [0.2365949834541582, 0.30125213565484754], [0.1329422783519746, 0.2171466515976858], [0.2554222545497132, 0.2479190467592895], [0.17297060371414155, 0.22729751298938788], [0.19718139778865862, 0.28495250451271364], [0.11150408173938373, 0.29526886081358966], [0.15207098673022074, 0.3089306068250743]]

def getTestClassified():
    return [[1, 2, 3, 5, 6, 7, 9, 12, 13, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 43, 44, 46, 47, 48, 49], [51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 90, 95, 98, 99], [100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 133, 134, 135, 136, 137, 139, 143, 145, 148, 149], [150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 163, 167, 168, 169, 170, 171, 174, 175, 177, 178, 179, 180, 182, 184, 185, 186, 187, 189, 191, 192, 193, 197, 198, 199]]

def getTestNotClassified():
    return [0, 4, 8, 10, 11, 14, 15, 16, 20, 25, 33, 39, 40, 41, 42, 45, 50, 52, 56, 65, 67, 69, 73, 85, 87, 89, 91, 92, 93, 94, 96, 97, 107, 108, 109, 111, 115, 123, 126, 131, 132, 138, 140, 141, 142, 144, 146, 147, 152, 157, 162, 164, 165, 166, 172, 173, 176, 181, 183, 188, 190, 194, 195, 196]
    
def getTestAllClasses():
    return [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]]


def getTest2DataSet():
    return [[0.4985056370728207, 0.7364431953812073], [0.470575981729305, 0.7381334651438186], [0.22380492380182604, 0.7826609450183846], [0.21542863581494445, 0.757054838556838], [0.2358590405377211, 0.6143164513740806], [0.2472866239440734, 0.6415319464135367], [0.44931480925088146, 0.6024639264893189], [0.46986386448376505, 0.626659726961162], [0.27251639807679195, 0.6237081004723379], [0.27706282475226796, 0.6004163276674302], [0.348732708385406, 0.7191352496332594], [0.3689974957353048, 0.6832446363508641], [0.32323312793502795, 0.800883460952794], [0.29943103029942864, 0.7904636962681763], [0.26800320048554876, 0.870392431593883], [0.2927793872898455, 0.8458964219906736], [0.1386350405505455, 0.8418807068935905], [0.11757229032197435, 0.8313350550330323], [0.34247064498832996, 0.7453736456340525], [0.37557485213966135, 0.761811983160489], [0.18964111563738328, 0.6051674370950973], [0.18158324836398876, 0.5865832413223275], [0.42140276486071626, 0.692594484898706], [0.3999694464341083, 0.6809765473115085], [0.20441187982688325, 0.6128857980523255], [0.22731053528945314, 0.6325129686855919], [0.2206161754337445, 0.7237239387112661], [0.2405501929286518, 0.6968930433513049], [0.18698350112392503, 0.696071677065592], [0.2048471445184549, 0.6749915309186735], [0.22168818140616228, 0.6655579221221178], [0.187963742276491, 0.6595560847144444], [0.23188508373774303, 0.7317755573393182], [0.22865080186080666, 0.7523737380727151], [0.3159358787681837, 0.736220511897891], [0.35503305524058515, 0.7325088136957691], [0.3589167118510725, 0.6942755247475927], [0.356952045394696, 0.7224960082764492], [0.19915550896010908, 0.7335879135277166], [0.19001736931804855, 0.7097946812540078], [0.29736801914654487, 0.7195865981819461], [0.3177841854940818, 0.7297393649103536], [0.3143552376917532, 0.6937872358840098], [0.3248342109034266, 0.7207931849902373], [0.2872572946442824, 0.7131745055715146], [0.28115438662076575, 0.6779714853941463], [0.39483683347794823, 0.755433055988816], [0.3874896773331135, 0.7270688795009437], [0.39795923311102366, 0.7242781189488745], [0.4235339564207556, 0.7236221092531907], [0.752789465147743, 0.6154728493725505], [0.7369996710253321, 0.6282601409802794], [0.7076540225610466, 0.5647622516912347], [0.7180630743321386, 0.5914464966459989], [0.8094478877622014, 0.3402485469691449], [0.8009340313243012, 0.3711258132385338], [0.6125019239629738, 0.43776714634506936], [0.6377590609795557, 0.43877545029676474], [0.7344954027496716, 0.7406348825672258], [0.7214222533882985, 0.7692595246144922], [0.7515793750788806, 0.2229227036028636], [0.7642605439130536, 0.20578211720710002], [0.6493041011848868, 0.3890837032811159], [0.6290438058731648, 0.371116365957435], [0.6675741985893072, 0.5407309591365637], [0.6684578130863, 0.565514955686556], [0.9896050108430491, 0.5303853568951613], [0.9537588808583856, 0.5408655352991601], [0.9296199153900075, 0.5603500168126825], [0.9440140658933679, 0.5432474226451698], [0.47906555523824534, 0.3551902442471571], [0.48060578139115556, 0.3773602650545728], [0.20119919779965656, 0.13009222933755105], [0.20587984504706763, 0.14965380461949399], [0.5743073050677565, 0.31415000537960697], [0.5515149796019075, 0.3185551224849721], [0.5484102496457312, 0.1354298457179326], [0.540341083039816, 0.10623105485577397], [0.6825243820106581, 0.5664004363765014], [0.7061788576369272, 0.5856642929991824], [0.7645361215662659, 0.6014707046734474], [0.7658446449768528, 0.579651419768224], [0.6613629210056902, 0.29952223795287836], [0.6709909039836702, 0.31947655468630204], [0.61651986690118, 0.30096823275840473], [0.6179718957705337, 0.2792705024698755], [0.4261388227709182, 0.27577063333649854], [0.3934186653099502, 0.2556525201231256], [0.6779543539957784, 0.5994220310048957], [0.6826153890579086, 0.5540488774635678], [0.8694316051165522, 0.6656510595837792], [0.8850129323755767, 0.6480087624571591], [0.785559451354624, 0.5969046265044474], [0.7778272374374318, 0.5741031271038297], [0.9128625600660517, 0.33851696380482016], [0.9216163376589493, 0.2975312329545288], [0.88773292384669, 0.4619625545169061], [0.8986156208910561, 0.43887327781698976], [0.5728285831316097, 0.3311631531342214], [0.5628950435384418, 0.3764598301406455], [0.9486182021270501, 0.5238576268747579], [0.9781694841499151, 0.54259498751319], [0.22666462757173206, 0.02644744291177037], [0.22351464293142023, 0.048162575481036154], [0.5608037116257163, 0.19231134412696238], [0.5557404811970055, 0.1670870567499101], [0.953283359738149, 0.7857510714201204], [0.957296344164226, 0.8109289593929828], [0.8374800100507402, 0.33260839919734425], [0.8151127264086416, 0.32200551528107835], [0.5976743494839412, 0.4173499794070812], [0.579364293800412, 0.43130193303299363], [0.6649980653910708, 0.22067133744875722], [0.6811974270636186, 0.24381024970370951], [0.6755536045343536, 0.14651322101332254], [0.6626626768426858, 0.12383330048633351], [0.4468656711744162, 0.269218442946211], [0.45920425519234626, 0.2903515276915354], [0.7434270603663654, 0.3722734287622062], [0.7411428542027939, 0.3522888837437192], [0.6908196236344925, 0.506428027916519], [0.6580644107041153, 0.5181087564043142], [0.4197809725077307, 0.2274382529889789], [0.403940695508533, 0.26398727368964753], [0.10707663577144626, 0.25393799285574337], [0.12949654803225938, 0.25598177788977206], [0.5375947095425391, 0.3706327090903449], [0.5648944019193989, 0.3590556309827803], [0.833594268383443, 0.7655968534468309], [0.8172506485362624, 0.7389643959134637], [0.1806994355288512, 0.279789974206878], [0.20110510008773583, 0.27167397079610495], [0.6555490767374584, 0.5478913403012773], [0.6848124592173985, 0.5556472461834322], [0.5822006398116579, 0.06600572160145335], [0.5624035920173175, 0.07926102398122001], [0.6715986757476714, 0.5295195592428059], [0.6590255455436383, 0.49680581921377354], [0.6880996798535364, 0.14995434432731358], [0.6850584929864254, 0.18188234812424678], [0.5459340384311661, 0.27838879223643953], [0.5844163719172936, 0.257292911961379], [0.15565076980505704, 0.11566027360578579], [0.1217373980438658, 0.1269062782480538], [0.8767039636702947, 0.4428585022570256], [0.8562270165654404, 0.45471232272702705], [0.24600659028800584, 0.08714746855161704], [0.23602575518964847, 0.06298756850918336], [0.2784069254752788, 0.10967601605625632], [0.3034737591297582, 0.1171434007132473], [0.6771545259510064, 0.7969819770093269], [0.6557611302892459, 0.7997921869049743], [0.7150648546277545, 0.7923753795682285], [0.7167097487558703, 0.8159701881516452], [0.7395457860813004, 0.6016807191476781], [0.713643906417828, 0.6347877752706504], [0.3525457377711012, 0.3039556035737124], [0.3262982260834872, 0.2893512990479407], [0.10073530887205989, 0.2833713600346893], [0.08236118720627453, 0.2660178650239138], [0.6330285486571757, 0.5382074798642581], [0.6344990246467312, 0.562392738874056], [0.5239299563858881, 0.4642578021472912], [0.4818370120812736, 0.43713344773913976], [0.29836038542577753, 0.32675921764297516], [0.27366052778180155, 0.33212629925047304], [0.5746465968715155, 0.40759537210959557], [0.5944291699360169, 0.4007350757912251], [0.5794920929328039, 0.4834886859663204], [0.6021546121603993, 0.4500631752157183], [0.7959829013734392, 0.7826082940296576], [0.7751302570788167, 0.7840874649080674], [0.6567656641013305, 0.4838107968574962], [0.6384631666709474, 0.49400456806783205], [0.10880678446823938, 0.26934362589101934], [0.1382639465386082, 0.274335986640867], [0.2396345589741697, 0.2140161645790042], [0.25198419271060224, 0.19600076802954647], [0.5793663754022298, 0.47753828048577174], [0.5781685225078224, 0.49791079108379327], [0.7036467854824084, 0.6366175201455444], [0.6614623714853431, 0.6126408073408567], [0.7882236281984907, 0.722287272903849], [0.8090358057452568, 0.7119427825314226], [0.5372914996177923, 0.4233633587273155], [0.5149894585648839, 0.43588552000536196], [0.6673847445366751, 0.6258387430295619], [0.674675710531216, 0.6453210666546273], [0.17494730993049268, 0.21373454471002507], [0.1890757996934297, 0.22982221965167451], [0.6639920749258023, 0.6851320306022394], [0.6453868003891936, 0.6640329757473258], [0.6707143879978512, 0.47219493024155795], [0.6765924764694817, 0.5180225183588885], [0.6491007310179039, 0.7627200456905695], [0.6306842929101721, 0.7527334067950849], [0.3970019296500451, 0.3552696141068164], [0.3750462630608366, 0.35525923444649127], [0.6589619524954629, 0.6547965647293286], [0.6609379845382878, 0.6220972385739386], [0.47277201620009046, 0.4359677757360434], [0.5046196410182257, 0.42874025909559815], [0.2472701539377311, 0.3126085537490622], [0.22630298893279835, 0.28895734181329863], [0.6940849090826304, 0.5886979066608249], [0.6938812661345699, 0.5666255831206602], [0.20178990032640493, 0.33821644571230114], [0.1758123768345569, 0.3387286278842335], [0.7077953968082185, 0.7673874175188433], [0.7038040613368246, 0.7917989687447691], [0.38468434888257597, 0.3868733800967916], [0.41216534799299337, 0.393028347205482], [0.6136526394704103, 0.5360063174234762], [0.6122156093866337, 0.5613894979153194], [0.7305641879572139, 0.7848353974918912], [0.7548801183251743, 0.7680699060655356], [0.44143020688967627, 0.3377151482972584], [0.4448327426705057, 0.35932632071353093], [0.49999252990864895, 0.4152552464462085], [0.5106313417658181, 0.44584047374066554], [0.6124415207207226, 0.4731510865815919], [0.6343041899800907, 0.4548162508430635], [0.37597454717185996, 0.33998220908060506], [0.39364659811271824, 0.3141685154602649], [0.3806227328258154, 0.25763711481470974], [0.3882652847671192, 0.281943752741977], [0.5913527670780121, 0.5055454553975463], [0.5749115027315085, 0.5181085213675116], [0.4379318232961851, 0.3814491034637162], [0.4629582894262479, 0.38298871536926427], [0.5570608826612709, 0.5249406694764955], [0.5354071014747758, 0.5369761207902827], [0.36384352515567564, 0.3482522157712536], [0.3469154739390065, 0.36122303747413714], [0.3994702100129822, 0.38492337716679703], [0.37834094292479625, 0.35039601176812296], [0.6461786537559455, 0.5379478532168595], [0.6623605784762383, 0.5610725128836022], [0.7772923066985887, 0.7366177610475207], [0.8072699238109187, 0.7436074241959393], [0.6574475014912474, 0.5219828135120231], [0.6578379409685782, 0.49636752552336444], [0.48958595850765574, 0.3636682578187058], [0.49178918095185686, 0.4012639146498837], [0.6068063242930931, 0.44380925692489076], [0.6212329774860983, 0.4191724525527292], [0.6663549615530764, 0.5816866340237932], [0.691697772742135, 0.585513810174261], [0.6762579959150031, 0.6513296640445851], [0.7061143375069954, 0.6491512290973868]]

def getTest2Classified():
    return [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249]]

def getTest3DataSet():
    return [[0.4309945577884165, 0.5909216224658961], [0.5418666500631288, 0.5945164824483634], [0.4080256991583657, 0.49809018972095204], [0.3273163736180708, 0.6043926894247837], [0.4243182453157507, 0.48820486588955847], [0.4053895109537365, 0.6098810232155953], [0.3599844069949407, 0.6316675285572599], [0.3977337641822669, 0.6998238745984813], [0.3072928838206178, 0.5251598304318308], [0.37775750558571547, 0.6132358739222732], [0.79985063034241644, 0.55173669644085022], [0.55250778741089768, 0.25779845404670887], [0.30902684642258549, 0.1733767574469296], [0.3275413566440401, 0.14822661719880126], [0.29513433339130668, 0.18158529049731831], [0.74574046393743676, 0.53557227136955454], [0.101551627746369, 0.093706439886103943], [0.89546577178145437, 0.72740269289874471], [0.50170797679070389, 0.05322001370029783], [0.30419579161173887, 0.072169980475009332], [0.46784259343158829, 0.15713397303760213], [0.78062660539440809, 0.46926613643123366], [0.41736798163143585, 0.031010948936991745], [0.8595084701179394, 0.46410271541438192], [0.94970032407949501, 0.33440304942434956], [0.40413058362591958, 0.22571203132955797], [0.71478054038053274, 0.41355655773306732], [0.24087808804217531, 0.054920704077818572], [0.22485002768590762, 0.083670645411359601], [0.53151355774297004, 0.24607951278935103], [0.87694051991701727, 0.75012055799172872], [0.84187058972992124, 0.49678782893591905], [0.68041262695637694, 0.63766308625816737], [0.28837819036127527, 0.22871579083914217], [0.19514598733229049, 0.20575893087188057], [0.21638625718954121, 0.072304306959734999], [0.67149091451344722, 0.37558029964185558], [0.17596556328760443, 0.15551296740578724], [0.89441404846062667, 0.69921093289886316], [0.14843694168717167, 0.051072446084131751], [0.49096302115129409, 0.40371983291515584], [0.67073271116228605, 0.46198695888060526], [0.78951128997707531, 0.76590988836381679], [0.85657413911719893, 0.71380050835757347], [0.21536067017542584, 0.354832282784595], [0.51273147004473874, 0.23466452318202491], [0.19357469350025419, 0.15661952445437866], [0.56605205800334613, 0.18888297238363505], [0.31082974217123543, 0.061510025846665539], [0.73318425858872949, 0.58518563236613785]]

def getTest3Classified():
    return [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]]
	
def displayResults(plt, MD, scale = 1):
    fig = plt.figure(figsize=(5 * scale, 5 * scale), dpi=100)
    ax0 = plt.subplot(1,1,1)
    KS = [v[0] for v in MD]
    ax0.set_xlim([min(KS), max(KS)])
    M = [v[1] for v in MD]
    ax0.set_ylim([0.0, max(M)])
    ax0.set_xlabel("K", fontsize=14)
    ax0.set_ylabel("TOTAL DISTANCE", fontsize=14)
     
    X = [d[0] for d in MD]
    Y = [d[1] for d in MD]
    ax0.plot(X, Y, marker="o", ls="--", ms=5, mfc = "black", mec="black")

    
    plt.tight_layout()
    plt.draw()
    plt.show()
